#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\newcommand{\langname}{Trajedy}
\newcommand{\TODO}[1]{\emph{\textbf{TODO:} #1}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
The 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
langname{}
\end_layout

\end_inset

 programming language
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
langname{}
\end_layout

\end_inset

 is a 2-dimensional language that involves a pointer moving in a straight
 path through a square grid.
 The grid contains instruction squares that may change the direction of
 the pointer or perform input/output.
 It is similar to Befunge in this way, except that the pointer moves continuousl
y and non-orthogonal directions are possible.
 The instruction symbols (
\family typewriter
,./
\backslash

\family default
) are similar to their counterparts in PATH.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
langname{}
\end_layout

\end_inset

 was conceived as an attempt to remove the memory stack from Befunge.
 Besides the grid and the pointer's own configuration, no other program
 memory is provided in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
langname{}
\end_layout

\end_inset

.
 This makes it exceedingly difficult, if not impossible, to store and manipulate
 data.
 It is not known whether 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
langname{}
\end_layout

\end_inset

 is Turing-complete, or, in fact, whether it provides any usable memory
 whatsoever.
\end_layout

\begin_layout Subsection*
Syntax
\end_layout

\begin_layout Standard
A 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
langname{}
\end_layout

\end_inset

 program is written in lines of plain text.
 The official character encoding is UTF-8, but there is no obstacle to programmi
ng in the ASCII subset only.
 The text is split into lines and treated as a rectangle of characters,
 and space characters are appended to shorter lines to fill out the rectangle.
\end_layout

\begin_layout Standard
Note that a 
\emph on
line
\emph default
 is a sequence of characters, ending with a newline character (except that
 the last line does not end with a newline), and padding spaces are added
 
\emph on
after
\emph default
 the newlines.
 For programs that end with a newline, the reference implementation adds
 a blank line at the end; however, this has no effect on the semantics for
 any program.
\end_layout

\begin_layout Subsection*
Semantics
\end_layout

\begin_layout Standard
From now on the rectangle of characters will be referred to as the 
\emph on
program area
\emph default
.
 The program area is divided into a grid of squares, with each unit square
 containing one character of the program area.
 The program pointer is a single moving point, and starts at the top-left
 corner of the top-left square, moving towards the bottom-right corner of
 that square.
 It keeps moving during the entire execution of the program.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement bh
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="20text%">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="20text%">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="20text%">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename enter-edge.svg
	BoundingBox 0bp 0bp 76bp 76bp

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
b)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename enter-corner.svg

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
c)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename no-edge.svg

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Crossing-square-boundaries"

\end_inset

Crossing square boundaries.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the pointer crosses the boundary of a square, it is said to 
\emph on
enter
\emph default
 a neighbouring square (Fig.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Crossing-square-boundaries"

\end_inset

a).
 If the pointer crosses a corner, it enters the square opposite to the square
 it came from (Fig.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Crossing-square-boundaries"

\end_inset

b).
\end_layout

\begin_layout Standard
The pointer is never allowed to move along the edges between squares (Fig.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Crossing-square-boundaries"

\end_inset

c).
 This is the 
\emph on
no-edge rule
\emph default
.
\end_layout

\begin_layout Standard
If the pointer crosses the boundary of the program area, the program halts.
\end_layout

\begin_layout Subsubsection*
Entering a square
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{samepage}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the pointer enters a new square, it performs an action determined by
 that square's character, as well as whether the pointer is in a special
 mode.
 The initial mode of the pointer is the 
\emph on
normal
\emph default
 mode; the other modes are 
\emph on
input
\emph default
 and 
\emph on
output
\emph default
.
 If the pointer enters a square in normal mode:
\end_layout

\begin_layout Itemize
If the square contains a space character, nothing happens and the pointer
 continues on its path.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{samepage}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If the square contains a period (
\family typewriter
.
\family default
), the pointer changes to 
\emph on
output
\emph default
 mode and will output from the next square.
\end_layout

\begin_layout Itemize
If the square contains a comma (
\family typewriter
,
\family default
), the pointer changes to 
\emph on
input
\emph default
 mode and will modify the next square.
\end_layout

\begin_layout Itemize
If the square contains a forward (
\family typewriter
/
\family default
) or backward slash (
\family typewriter

\backslash

\family default
), it is treated like a two-sided mirror between the appropriate corners
 of the square.
 If the pointer's path intersects this mirror, it changes direction by reflectin
g off the mirror.
 Pointers may reflect off the corners of mirrors, at the same angle (as
 if the mirror extends slightly past the corner).
 If the pointer is travelling on the same line as the mirror itself, its
 path is not changed.
\end_layout

\begin_layout Standard
For any other character in normal mode, the square is treated as a 
\emph on
beacon
\emph default
.
 The pointer changes direction to move towards the
\emph on
 
\emph default
nearest matching beacon; i.e.
 another square that contains the same character.
 (If there is no unique nearest matching beacon, nothing happens.) More precisely
, the pointer moves along the line that has the shortest distance to the
 boundary of one of those squares.
\end_layout

\begin_layout Standard
Note that the pointer changes direction immediately, while it is still on
 the edge of the beacon being entered.
 If this causes it to move back towards the square that it came from, it
 will enter that square again.
\end_layout

\begin_layout Standard
If the nearest beacon is in a position that would cause the pointer to move
 along square edges, then the program has violated the 
\emph on
no-edge rule
\emph default
 and is considered invalid.
 (The reference implementation exits with a failure code.)
\end_layout

\begin_layout Subsubsection*
Input and output modes
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{samepage}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The program can perform I/O when entering a square in input or output mode:
\end_layout

\begin_layout Itemize
If the pointer is in output mode, the square's character is output, then
 the pointer returns to normal mode.
\end_layout

\begin_layout Itemize
If the pointer is in input mode, the next character from program input is
 read and placed in the square.
 Then the pointer returns to normal mode.
\end_layout

\begin_layout Standard
The normal-mode behaviour of that square is ignored while in one of these
 modes.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{samepage}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the program starts, the pointer is considered to be entering the top-left
 square in normal mode.
\end_layout

\begin_layout Subsection*
Known issues
\end_layout

\begin_layout Subsubsection*
Input
\end_layout

\begin_layout Standard
Input processing in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
langname{}
\end_layout

\end_inset

 has some problems.
 These may be fixed in a future revision of the language.
\end_layout

\begin_layout Itemize
The only way to analyse an input character is to use it as a beacon.
 This requires programs to have a beacon for every input character.
 While this in itself is not a big problem, it makes processing difficult
 for (
\family typewriter
.
\family default
) and (
\family typewriter
,
\family default
), which are not beacons and cannot be safely inspected.
 (Mirrors and spaces are not beacons, either, but their effect on pointer
 direction can be measured.)
\end_layout

\begin_layout Itemize
The input command cannot signal end-of-input to the program.
 The reference implementation currently sends a 
\family typewriter
NUL
\family default
 character instead, but programming with this is inelegant, not least because
 programs that want to detect it must also contain a 
\family typewriter
NUL
\family default
 character.
 (The graphical interpreter also does not support 
\family typewriter
NUL
\family default
 characters due to a GTK+ limitation.)
\end_layout

\begin_layout Subsubsection*
Unicode
\end_layout

\begin_layout Standard
The language spec does not clearly describe how Unicode text should be handled.
\end_layout

\begin_layout Standard
The reference implemention has some basic support for Unicode, using codepoints
 (instead of characters).
\end_layout

\begin_layout Standard
The main rationale for Unicode is to not exclude programs that want a huge
 number of distinct beacons.
 However, if Unicode causes too many problems, it could potentially be dropped.
\end_layout

\begin_layout Subsection*
Discussion
\end_layout

\begin_layout Subsubsection*
Implementation
\end_layout

\begin_layout Standard
The initial position and direction of the pointer, as well as all subsequent
 states, can be represented by Cartesian coordinates with rational numbers.
 Hence, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
langname{}
\end_layout

\end_inset

 can easily be implemented on any Turing machine.
\end_layout

\begin_layout Standard
The beacons are the only program elements to have non-local behaviour.
 Even this can be avoided by using, for example, Voronoi regions to pre-calculat
e the nearest beacon for every point.
 However, dynamic beacons (created in input mode) still entail non-local
 control flow.
\end_layout

\begin_layout Subsubsection*
Infinitesimals
\end_layout

\begin_layout Standard
The pointer only needs to enter a square's (infinitesimally-thin) boundary
 to be affected by it.
 This leads to some physically unintuitive behaviour.
\end_layout

\begin_layout Itemize
In the following program, the pointer moves to the corner between the X
 beacons, then bounces between the beacons indefinitely.
 However, it does not move any nonzero distance.
\begin_inset Newline newline
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\searrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
X
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize
Mirrors extend to the corners of their squares.
 However, the pointer must actually enter a mirror's square to be affected
 by it.
 Hence, pointers can 
\begin_inset Quotes eld
\end_inset

tunnel
\begin_inset Quotes erd
\end_inset

 between infinitesimally small gaps between mirrors, like in the following
 program:
\begin_inset Newline newline
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\searrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathtt{\diagup}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathtt{\diagup}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
Newlines and padding
\end_layout

\begin_layout Standard
Recall that each line of the program source is padded up to the width of
 the program area, but 
\emph on
after
\emph default
 the newline character.
 This means that trailing whitespace may be significant.
 A short source line will place a newline square away from the program area's
 right edge, and it can act as a beacon.
 Placing newlines this way is also the only way to output newlines without
 ending the program.
\end_layout

\begin_layout Subsubsection*
Control flow
\end_layout

\begin_layout Standard
A simple scheme for control flow is to constrain the pointer to move in
 orthogonal directions, i.e.
 parallel to the square grid lines.
 Orthogonal pointers remain orthogonal when reflected by mirrors; they also
 do not drift across rows or columns.
 A device for setting this up at the beginning of the program is
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
…
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Y
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
which causes the pointer to move horizontally towards the second 
\family typewriter
Y
\family default
.
\end_layout

\begin_layout Standard
When designing an orthogonal-flowing program, beacons should be placed on
 the same row or column, and the pointer should be directed to beacon edges
 within that row or column.
 This preserves the orthogonal flow (or even resets a non-orthogonal pointer).
 The 
\family typewriter
cat
\family default
 and 
\family typewriter
truth
\family default
 example programs use this construction extensively.
\end_layout

\begin_layout Subsubsection*
Memory
\end_layout

\begin_layout Standard
All program memory (except for a few squares that store input characters)
 must be encoded into the pointer's motion, one way or another.
 The pointer can easily enter an unbounded number of states from a finite
 program (try tracing the 
\family typewriter
cat
\family default
 example).
 However, it is still not known whether this state space can be used for
 general storage.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename beacon-transforms.svg
	height 8em

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Beacon-transforms"

\end_inset

Some building blocks for offset transforms.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Any memory storage scheme is likely to use the pointer's position rather
 than its direction, as beacons will reset the direction.
 Suppose that information is encoded in a position offset 
\begin_inset Formula $x$
\end_inset

, 
\begin_inset Formula $0<x<1$
\end_inset

 (see Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Beacon-transforms"

\end_inset

).
 By pointing it at a beacon at distance 
\begin_inset Formula $\left(a,b\right)$
\end_inset

, then redirecting the pointer after it has travelled 
\begin_inset Formula $c$
\end_inset

 squares, we can transform the offset 
\begin_inset Formula $x$
\end_inset

:
\end_layout

\begin_layout Itemize
If 
\begin_inset Formula $c$
\end_inset

 is along 
\begin_inset Formula $b$
\end_inset

: 
\begin_inset Formula $x\rightarrow\frac{c\left(a+x\right)}{b}\mod1$
\end_inset


\end_layout

\begin_layout Itemize
If 
\begin_inset Formula $c$
\end_inset

 is along 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $x$
\end_inset

: 
\begin_inset Formula $x\rightarrow\frac{b\left(c+x\right)}{a+x}\mod1$
\end_inset


\end_layout

\begin_layout Standard
Interesting special cases:
\end_layout

\begin_layout Itemize
\begin_inset Formula $a=0,b=2,c=1$
\end_inset

: 
\begin_inset Formula $x\rightarrow\frac{x}{2}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $a=1,b=2,c=1$
\end_inset

: 
\begin_inset Formula $x\rightarrow\frac{x}{2}+\frac{1}{2}$
\end_inset


\end_layout

\begin_layout Standard
These let us selectively prepend a 0 or 1 bit to the binary digits of the
 offset 
\begin_inset Formula $x$
\end_inset

.
 Retreiving the bits from 
\begin_inset Formula $x$
\end_inset

 may be difficult, though.
\end_layout

\end_body
\end_document
