#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\newcommand{\langname}{Trajedy}
\newcommand{\TODO}[1]{\emph{\textbf{TODO:} #1}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection*
The 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
langname{}
\end_layout

\end_inset

 programming language
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
langname{}
\end_layout

\end_inset

 is a 2-dimensional language that involves a pointer moving continuously
 through a square grid.
 The grid contains instruction squares that may change the direction of
 the pointer or perform input/output.
 It is similar to Befunge in this way, except that the pointer moves continuousl
y and non-orthogonal directions are possible.
 The instruction symbols (
\family typewriter
,./
\backslash

\family default
) are similar to their counterparts in PATH.
\end_layout

\begin_layout Subsection*
Syntax
\end_layout

\begin_layout Standard
A 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
langname{}
\end_layout

\end_inset

 program is a plain text file.
 The official character encoding is UTF-8 though implementations may also
 limit themselves to the ASCII subset.
 The text is treated as a rectangle of characters, and space characters
 are appended to shorter lines to fill out the rectangle.
 Newline characters are discarded.
\end_layout

\begin_layout Subsection*
Semantics
\end_layout

\begin_layout Standard
From now on the rectangle of characters will be referred to as the 
\emph on
program area
\emph default
.
 The program area is divided into a grid of squares, with each unit square
 containing one character of the program area.
 The program pointer starts at the top-left corner of the top-left square
 and begins moving towards the bottom-right corner of that square.
 It keeps moving during the entire execution of the program.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement bh
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="20text%">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="20text%">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="20text%">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename enter-edge.svg
	BoundingBox 0bp 0bp 76bp 76bp

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
b)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename enter-corner.svg

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
c)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename no-edge.svg

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Crossing-square-boundaries."

\end_inset

Crossing square boundaries.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the pointer crosses the boundary of a square, it is said to 
\emph on
enter
\emph default
 a neighbouring square (Fig.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Crossing-square-boundaries."

\end_inset

a).
 If the pointer crosses a corner, it enters the square opposite to the square
 it came from (Fig.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Crossing-square-boundaries."

\end_inset

b).
\end_layout

\begin_layout Standard
The pointer is never allowed to move along the edges between squares (Fig.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Crossing-square-boundaries."

\end_inset

c).
 This is the 
\emph on
no-edge rule
\emph default
.
\end_layout

\begin_layout Standard
If the pointer crosses the boundary of the program area, the program halts.
\end_layout

\begin_layout Subsubsection*
Entering a square
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{samepage}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the pointer enters a new square, it performs an action determined by
 that square's character, as well as whether the pointer is in a special
 mode.
 The initial mode of the pointer will be called the 
\emph on
normal
\emph default
 mode.
 If the pointer enters a square in normal mode:
\end_layout

\begin_layout Itemize
If the square has a space character, nothing happens and the pointer continues
 on its path.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{samepage}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If the square has a period (
\family typewriter
.
\family default
), the pointer changes to 
\emph on
output
\emph default
 mode and will output the next character.
 However, this would not be able to output newlines, which are not initially
 present in the program area.
 Hence, if this square is on the rightmost boundary of the program area,
 the program immediately outputs a newline and does not change modes.
\end_layout

\begin_layout Itemize
If the square has a comma (
\family typewriter
,
\family default
), the pointer changes to 
\emph on
input
\emph default
 mode.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
TODO{EOF handling}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If the square has a forward (
\family typewriter
/
\family default
) or backward slash (
\family typewriter

\backslash

\family default
), it is treated like a two-sided mirror between the appropriate corners
 of the square.
 If the pointer's path intersects this mirror, it changes direction by reflectin
g off the mirror.
 Pointers that enter the square at one of the mirror's corners are not affected
 by the mirror.
 (If they enter from any other boundary point, they can reflect off the
 corners, at the same angle as the rest of the mirror.)
\end_layout

\begin_layout Standard
For any other character in normal mode, the square is treated as a 
\emph on
beacon
\emph default
.
 The pointer changes direction to move towards the
\emph on
 
\emph default
nearest matching beacon; i.e.
 another square that contains the same character.
 (If there is no unique nearest matching beacon, nothing happens.) More precisely
, the pointer moves along the line that has the shortest distance to the
 boundary of one of those squares.
\end_layout

\begin_layout Standard
Note that the pointer changes direction immediately, while it is still on
 the edge of the square being entered.
 If this causes it to move back into the square that it came from, it will
 enter that square again.
\end_layout

\begin_layout Standard
If the nearest beacon is in a position that would cause the pointer to move
 along square edges, then the program has violated the 
\emph on
no-edge rule
\emph default
 and is considered invalid.
\end_layout

\begin_layout Subsubsection*
Input and output modes
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{samepage}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The program can perform I/O when entering a square in input or output mode:
\end_layout

\begin_layout Itemize
If the pointer is in output mode, the square's character is output, then
 the pointer returns to normal mode.
\end_layout

\begin_layout Itemize
If the pointer is in input mode, the next character from program input is
 read and placed in the square.
 Then the pointer returns to normal mode.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{samepage}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the program starts, the pointer is considered to be entering the top-left
 square in normal mode.
\end_layout

\end_body
\end_document
